# Unique name for this workflow
name: Deploy to UAT branch

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    push:
        # The branches filter allows to specify that this workflow should only
        # run if the branch name is "develop". This way we prevent this workflow
        # from running when PRs are opened on other branches
        branches: [ UAT ]
        # We only care about changes to the force-app directory, which is the
        # root directory of the sfdx project. This prevents the job from running
        # when changing non-salesforce files (like this yml file).
        paths:
            - 'force-app/**'
            

# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    deployment-on-UAT-org:
        # As mentioned in the blog post, this job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version
        # of ubuntu
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v3
              with:
                node-version: '14'
            

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            
            # Store SFDX CLI in Cache
            - name: Cache SFDX CLI packages
              id: cache-sfdx
              uses: actions/cache@v3
              env:
                cache-name: cache-sfdx-cli-modules
              with:
                path: ~/sfdx
                key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/sfdx-project.json') }}
            
            # Now Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              if: ${{ steps.cache-sfdx.outputs.cache-hit != 'true' }}
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # Then we install the SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            # This is an awesome plugin that allows us to extract a package.xml with the metadata
            # that has changed between commits. I highly recommend going over the github readme 
            # for more information on how this works.
            
            # Update SFDX CLI
            - name: 'Update SFDX'
              if: ${{ steps.cache-sfdx.outputs.cache-hit == 'true' }}
              run: |
                echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                ~/sfdx/bin/sfdx version
            
            #Download Artifact
            - uses: actions/download-artifact@v2
              with:
                name: deployment-result
            
            # Prior to setting up this workflow, you have to create a Github Secret
            # that contains the sfdx url of the integration/qa org.

            # The steps to generate the url are here 
            # https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_auth_sfdxurl.htm

            # This URL can then be used with the sfdx auth:sfdxurl:store to authenticate
            # the sfdx project in the repositry, against the org from which the URL
            # was generated from. This works just like that, there's no need to create
            # connected apps or any else. 

            # The URL is stored in the Github Secret named SFDX_INTEGRATION_URL
            # so here we store the URL into a text file
            - name: 'Populate auth file with SFDX_URL secret of integration org'
              run: |
                  echo ${{ secrets.UAT }} > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to Integration Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration

            # We do a check-only deploy and we only run the tests specified in the PR
            # If the env variable does not equal 'all', we know that there is a list of
            # tests that can be run

            # If the env variable equals all, we run all tests
            - name: 'deploy delta changes - run all tests'
              run: |
                  deploymentId=$( jq '.Id')
                  echo "DEPLOYMENT_ID=$deploymentId" >> "$GITHUB_ENV"
                  sfdx force:source:deploy -q ${{ env.DEPLOYMENT_ID }}

            # - name: 'Deploy destructive changes (if any)'
            #  run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings 
